{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","helpers/getTrends.js","Components/trendsGrid.js","hooks/useFetchTrends.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","getTrends","trending","gif","TrendsGrid","trend","setTrend","useFetchTrends","GifExpertApp","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1df943c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import setCategories from '../GifExpertApp';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');//si se deja sin las comillas queda valiendo undefined y da error xD\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    };\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault(); \r\n        //Permite quitar el comportamiento por defecto \r\n        //del submit del formulario sque refresca toda la pÃ¡gina xD\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories( categories => [ inputValue, ...categories ]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                />\r\n                <button type='submit'>Buscar</button>\r\n            </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)  }&limit=10&api_key=7uUdBEHgqLrRL7N5THi2GmOazGhXEtJP`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            {/* <p>{ title }</p> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            { loading && <p className='animate__animated animate__bounce'>Loading</p>} {/* Ampersan(? nos deja evaluar algo solo con respuesta positiva, el ternario (?) positivca y negativa */}\r\n\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />    \r\n                    ))\r\n\r\n                }\r\n            </div>\r\n            \r\n\r\n        </>\r\n    )\r\n}\r\n","//Todos los hooks empiezan con USE\r\n\r\n//Cuando uno necesita importar react es cuando uno \r\n//va a retornar un jsx\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }, [category]);//Solo se ejecuta la primera vez y cada vez que el argumento cambia  \r\n\r\n\r\n    return state; // QuÃ© devuelve?\r\n\r\n    //su estado inicial { data: [], loading: true}\r\n}\r\n","export const getTrends = async() =>{\r\n    const url = `https://api.giphy.com/v1/gifs/trending?api_key=7uUdBEHgqLrRL7N5THi2GmOazGhXEtJP&limit=15`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    \r\n    const trending = data.map( gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return trending;\r\n}","import React from 'react'\r\nimport { useFetchTrends } from '../hooks/useFetchTrends'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const TrendsGrid = () => {\r\n\r\n    const { data:images , loading } = useFetchTrends();\r\n\r\n    return (\r\n        <>\r\n            <h3>Trending ðŸ”¥</h3>\r\n\r\n            { loading && <p className='animate__animated animate__bounce'>Loading</p>} {/* Ampersan(? nos deja evaluar algo solo con respuesta positiva, el ternario (?) positivca y negativa */}\r\n\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />    \r\n                    ))\r\n\r\n                }\r\n            </div>\r\n            \r\n\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\nimport { getTrends } from '../helpers/getTrends';\r\n\r\n\r\nexport const useFetchTrends = ( category ) => {\r\n    \r\n    const [trend, setTrend] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getTrends()\r\n            .then( gifs =>{\r\n                setTrend({\r\n                    data: gifs,\r\n                    loading: false\r\n                })\r\n            } )\r\n\r\n    }, []);//Solo se ejecuta la primera vez y cada vez que el argumento cambia  \r\n\r\n\r\n    return trend; // QuÃ© devuelve?\r\n\r\n    //su estado inicial { data: [], loading: true}\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { GifGrid } from \"./Components/GifGrid\";\r\nimport { TrendsGrid } from \"./Components/trendsGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  /*     const handleAdd = () => {\r\n        setCategories( [...categories, 'SerieDeNico']);\r\n        //setCategories( [ 'SerieDeNico'], ...categories);\r\n      //Deja las categorias que ya tenÃ­a y agrega una nueva, spreed?\r\n    } // si pongo primero las categories anteriores me sale de Ãºltimas y viceversa\r\n */\r\n\r\n  return (\r\n    <>\r\n      <div className=\"banner\">\r\n          <span>Creado siguiendo el curso de <a href=\"https://twitter.com/Fernando_Her85\">@Fernando_Her85</a> por <a href=\"https://nicolasarevalo.tk\"><img className=\"logo\" src=\"./favicon.svg\"></img></a>\r\n          </span>\r\n      </div>\r\n      <header>\r\n        <h2>Giphy app ðŸ¤ </h2>\r\n        <span>Busca algo de lo que quieras ver gifs (ej: perritos)</span>\r\n        <AddCategory setCategories={setCategories} />\r\n      </header>\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n      <ol>\r\n        <TrendsGrid />\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}